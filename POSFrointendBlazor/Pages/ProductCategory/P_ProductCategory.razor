@page "/product-category"

<MudText Typo = "Typo-h6">
    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" aria-label="Create" onClick ="Popup">
        Product Category
    </MudIconButton>
</MudText>

@if(ResponseModel is not null){
    int count = 0;
    <MudSimpleTable Style="overflow-x: auto;">
    <thead>
        <tr>
            <td>No.</td>
            <td>Product Category Code</td>
            <td>Product Category Name</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in ResponseModel.Data.ProductCategory)
        {
            <tr>
                <td>++count</td>
                @* <td>@(++count) + ((pageNo - 1) * pageSize) (</td> *@
                <td>@item.ProductCategoryCode</td>
                <td>@item.ProductCategoryName</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudPagination SelectedChanged ="PageChanged" Count="@ResponseModel.PageSetting.PageCount" Class ="pa-4"/>
}
@code {
    private ProductCategoryListResponseModel ResponseModel;
    // private int pageNo = 1;
    // private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        ResponseModel = await HttpClientService.ExecuteAsync<ProductCategoryListResponseModel>(Endpoits.ProductCategory, EnumHttpMethod.Get);
        //await List();
    }

    private async Task List()
    {
        ResponseModel = await HttpClientService.ExecuteAsync<ProductCategoryListResponseModel>
        (
            Endpoints.ProductCategory.WithPagination(pageNo, pageSize),
            EnumHttpMethod.Get
    );
    }

    private async Task PageChanged(int i)
    {
        pageNo = i;
        await List();
    }
}
